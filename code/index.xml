<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Mario Sanchez Carrion</title>
    <link>https://mariosanchez.org/code/</link>
    <description>Recent content in Code on Mario Sanchez Carrion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Oct 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mariosanchez.org/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Auction Site with Django</title>
      <link>https://mariosanchez.org/code/commerce/</link>
      <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/commerce/</guid>
      <description>Made with:  Python
Source Files | Live Demo
This app was my implementation of CS50W&amp;lsquo;s Project 2, which involves Django, SQL, Models and Migrations.
Here are the specs:
  Models: Your application should have at least three models in addition to the User model: one for auction listings, one for bids, and one for comments made on auction listings. It’s up to you to decide what fields each model should have, and what the types of those fields should be.</description>
    </item>
    
    <item>
      <title>Wikipedia Clone with Django</title>
      <link>https://mariosanchez.org/code/wiki/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/wiki/</guid>
      <description>Made with:  Python
Source Files
This project is part of the CS50W Web Applications with Python and JavaScript online course.
It doesn&amp;rsquo;t use models, just views and templates, to build a wiki page. The program reads through a folder filled with entries written in Markdown, converts them to HTML and sends the HTML to Django templates.
The specs call for:
 A home page that lists the titles of all the entries and links to each individual entry page Search functionality Random page generator The ability to edit entries  Here is a short video of the final product:</description>
    </item>
    
    <item>
      <title>URL Shortener with Python</title>
      <link>https://mariosanchez.org/code/shorten/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/shorten/</guid>
      <description>Made with:  Python
Source Files This is a practice project in Python. We will create a Python program to shorten URLs using Bitly&amp;lsquo;s API.
Of course we can always shorten URLs directly from the Bitly page, but we don&amp;rsquo;t want to do that. We want to be able to do it straight from our computer&amp;rsquo;s command line, and to store each URL key value pair (long url, short url) in a CSV file in our computer.</description>
    </item>
    
    <item>
      <title>Today&#39;s Moon Phase With JavaScript</title>
      <link>https://mariosanchez.org/code/moon/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/moon/</guid>
      <description>Made with:  JavaScript
Source Files | Live Demo
I wanted a simple web page to show today&amp;rsquo;s date, moon phase and percentage illumination, plus a nice picture of the moon.
My first step was to find an API that I could call to retrieve today&amp;rsquo;s moon phase and illumination. After some research I found the Farmsense moon phase API. The API accepts a date as a parameter, formatted in milliseconds (Unix Time), but only takes the first ten digits.</description>
    </item>
    
    <item>
      <title>Covid-19 Dashboard</title>
      <link>https://mariosanchez.org/code/covid19/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/covid19/</guid>
      <description>Made with:  Python
Source Files | Live Demo This is a practice project in Python using the Covid package, which lets us retrieve information about Covid-19 from John Hopkins API.
The application.py file contains our program logic.
We start by importing the package that will provide us with the data:
from covid import Covid
The data comes in the form of a list of dictionaries (or if you&amp;rsquo;re more used to JS parlance, an array of objects).</description>
    </item>
    
    <item>
      <title>Mailing List Form with Express and CSV</title>
      <link>https://mariosanchez.org/code/csvlist/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/csvlist/</guid>
      <description>Made with:  Node and Express
Source Files
This is a simple server-side application made with Node and Express.
Instead of using a more advance data base, we used a super simple CSV file to store our data, and took advantage of the fs Node module and the neat-csv package to convert string information from our CSV database into an array of objects that we can then pass along to our success template made with Pug.</description>
    </item>
    
    <item>
      <title>Pizza Selector</title>
      <link>https://mariosanchez.org/code/pizza/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/pizza/</guid>
      <description>Made with:  JavaScript
Source Files | Live Demo
JavaScript program to choose only the pizzas with the ingredientes you want.
Select the ingredients you don&amp;rsquo;t want from a list of options and hit the submit button. The program will only show you pizzas with ingredients you want.
The script uses a plain vanilla XMLHttpRequest to bring the pizza information from a JSON file. They iterates over all pizzas and all ingredients in a pizza setting the property &amp;ldquo;wanted&amp;rdquo; to false if the pizza contains any ingrediente selected in the not-wanted list.</description>
    </item>
    
    <item>
      <title>Donate Button with Paypal Integration</title>
      <link>https://mariosanchez.org/code/ppl/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/ppl/</guid>
      <description>Made with:  Node and Express
Source Files | Live Demo
I got the inspiration for this project from this post in Willem Middelkoop&amp;rsquo;s blog. While Willem&amp;rsquo;s post went through the basic process, it didn&amp;rsquo;t provide detaied instructions on how to make this work on an actual server, or how to interact with the payment platform&amp;rsquo;s API. That&amp;rsquo;s when I went online and searched for tutorials and videos that might help me.</description>
    </item>
    
    <item>
      <title>Demo Site with Node and Express</title>
      <link>https://mariosanchez.org/code/express/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/express/</guid>
      <description>Made with:  Node and Express
Source Files | Live Demo
Before we go to our example site, let&amp;rsquo;s talk about Express:
Express is a web framework usually paired with Node. It is a light weight tool that makes it easy to build dynamic web applications.
Since Express is made with JavaScript, you can install it directly from NPM. Once you install it, you can build your first Express aplication: a simple Hello World!</description>
    </item>
    
    <item>
      <title>How To Implement a Dark Theme Switch for your Site</title>
      <link>https://mariosanchez.org/code/dark/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/dark/</guid>
      <description>Made with:  JavaScript
Source Files | Demo
We will implement a dark theme selector for our site that visitors can activate by clicking on an icon. We will discuss what we have to do to the HTML, CSS and JavaScript files that make up our site to make that happen.
The HTML &amp;lt;!--DOCTYPE--&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;script.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://kit.fontawesome.com/3fe16e504a.js&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Dark Theme&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a href=&amp;#34;contact.</description>
    </item>
    
    <item>
      <title>Foreign Exchange Mobile Web App</title>
      <link>https://mariosanchez.org/code/fx/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/fx/</guid>
      <description>Made with:  JavaScript
Source Files | Demo
Update: The API I was using for this project is not in business any more, so the demo will not work. I am looking for a new API to adapt this project and make it work again.
We will create a mobile web app that will display the current exchange of a basket of currencies versus the US dollar. Besides the current rate we also want to display the YTD % devaluation (or revaluation) for each of the currencies.</description>
    </item>
    
    <item>
      <title>Airlines</title>
      <link>https://mariosanchez.org/code/airlines/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/airlines/</guid>
      <description>Made with:  Python
Source Files
With this simple app we can type the name (or part of the name) of an airline in a form, and upon Submit we get a list of airlines that match our input followed by its IATA symbol. For example, you can type “american” in the search box:
If you then click Submit; the result will be a list of all the airlines that have “american” in their name, followed by their IATA symbol in parentheses:</description>
    </item>
    
    <item>
      <title>JavaScript Photo Gallery</title>
      <link>https://mariosanchez.org/code/photos/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/photos/</guid>
      <description>Made with:  JavaScript
I wanted to post a few pictures from my trips and other activities here in the site. Looking around the web for ideas I settled on a simple square format for the pictures, with a subtle frame and a gray transparent rectangle for the description placed at the bottom of the photo:
University of Miami These are the style declarations for the photos:
img.gallery { padding: 4px; border: 1px solid #ccc; margin-bottom: 1em; margin-right: 2%; } .</description>
    </item>
    
    <item>
      <title>Stock Info Dashboards with ReactJS</title>
      <link>https://mariosanchez.org/code/stocksreact/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/stocksreact/</guid>
      <description>Made with:  React
Source Files | Live DemoUpdate: As of May 9, 2020, the API I was using to fecth the stock info has gone out of business so the values you will get in the Demo are all null. The functionality of the app, though, remains correct. I will update as soon as I find another free API.
Objective To build a stock info app using React.
What we wanted to accomplish We wanted a simple form that let us input stock symbols.</description>
    </item>
    
    <item>
      <title>Progress Circle with JS and CSS</title>
      <link>https://mariosanchez.org/code/progresscircle/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/progresscircle/</guid>
      <description>Made with:  JavaScript |  CSS
Source Files | Live DemoI started with progressbar.js by Kimmo Brunfeldt, which does most of the heavy lifting. You can add it your project by including a link near your closing body tag to the CDN repository where progressbar.js resides.
I used Progressbar&amp;rsquo;s circle as the base for my project (you can use other geometrical shapes), which is intended to create an animated score dashboard to display at the end of a quiz.</description>
    </item>
    
    <item>
      <title>eCommerce App with Flask and SQLite</title>
      <link>https://mariosanchez.org/code/flaskecomm/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/flaskecomm/</guid>
      <description>Made with:  Python
Source Files | Live Demo
This app was my CS50x final project.
The app loads a gallery of soccer shirts that includes: image, description, price, and a small form to add item to cart. The shirt info is stored in a SQLite database and is displayed using Bootstrap&amp;rsquo;s card class.
The app includes a series of filters implemented using SQLite queries so you can see only shirts that match a certain filter: shirts by region, clubs vs.</description>
    </item>
    
    <item>
      <title>Micro Blog Front End with React</title>
      <link>https://mariosanchez.org/code/micro-blog/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/micro-blog/</guid>
      <description>Made with:  ReactJS
Source Files | Live DemoThis front end project is inspired in a minimal version of Twitter. We use React components and JavaScript ES6 classes, and put into practice the concept of state. It also uses JSX syntax.
We start by running Create React App, which provides the scaffolding for our site and performs all the lifting so that we can focus on the code.
Our app has six components:</description>
    </item>
    
    <item>
      <title>Real Estate Website with Bootstrap</title>
      <link>https://mariosanchez.org/code/rei/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/rei/</guid>
      <description>Made with:  HTML |  CSS |  JavaScript
Source Files | Live DemoThe objective was to design a clean, efficient, and fully responsive website for a real estate investments business. It needed to clearly describe what the company did, and include easy to follow call-to-actions throughout the site.
It was made using the Agency template for Bootstrap, a fully functional form by Formspree, and several jQuery plugins for smooth transitions and a carrousel of testimonials.</description>
    </item>
    
    <item>
      <title>Basic Calculator with HTML, CSS and JS</title>
      <link>https://mariosanchez.org/code/calc/</link>
      <pubDate>Sat, 18 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/calc/</guid>
      <description>Made with:  HTML |  CSS  JavaScript
Source Files | Live DemoProject involved creating the calculator interface with HTML and CSS and then adding fuctionality through event handlers and callback functions. It works fine, with some improvements yet to be made, like limiting the display to a certain number of digits so that they fit in the calculator window when the number is too large.
You can try it out here:</description>
    </item>
    
    <item>
      <title>Building a Single Page Application with AngularJS</title>
      <link>https://mariosanchez.org/code/angular/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/angular/</guid>
      <description>Made with:  Angular
Source Files | Demo
A few weeks ago I came across the concept of SPA, or Single Page Application, and learned that they can be created with Angular.js, a JavaScript library supported by Google.
Most definitions of SPA you can find online are very technical and full of jargon, so perhaps the best way a newbie web developer like me can understand it is with an example:</description>
    </item>
    
  </channel>
</rss>