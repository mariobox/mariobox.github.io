<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Mario Sanchez Carrion</title>
    <link>https://mariosanchez.org/code/</link>
    <description>Recent content in Code on Mario Sanchez Carrion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://mariosanchez.org/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Store Sales and Inventory System with SQL</title>
      <link>https://mariosanchez.org/code/store-sql/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/store-sql/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;:  &lt;i class=&#34;fas fa-database&#34;&gt;&lt;/i&gt; SQLite&lt;/p&gt;
&lt;p&gt;Video overview: (&lt;a href=&#34;https://youtu.be/0tICUfe6Nbg&#34;&gt;https://youtu.be/0tICUfe6Nbg&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;scope&#34;&gt;Scope&lt;/h4&gt;
&lt;p&gt;The database for the Soccer Shirt Store includes all entities necessary to facilitate the process of tracking customer orders and inventory available for a chain of sports retail stores that for now only sells soccer shirts. It also enables the generation of useful reports to run the business, as detailed in the &lt;code&gt;queries.sql&lt;/code&gt; file. As such, included in the database&amp;rsquo;s scope is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stores, including basic identifying information&lt;/li&gt;
&lt;li&gt;Salespersons, including basic identifying information&lt;/li&gt;
&lt;li&gt;Customers, including basic identifying information&lt;/li&gt;
&lt;li&gt;Shirts, including basic information&lt;/li&gt;
&lt;li&gt;Orders, including a field for &lt;strong&gt;type&lt;/strong&gt; which enables a return&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result of many-to-many relationships between the Stores and Shirts, and Orders and Shirts entities, the following junction tables will be created:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Carried, which details the inventory of shirts in each store&lt;/li&gt;
&lt;li&gt;Ordered, which details the shirts ordered in each order&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;functional-requirements&#34;&gt;Functional Requirements&lt;/h4&gt;
&lt;p&gt;This database will support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CRUD operations for orders&lt;/li&gt;
&lt;li&gt;Automatic update of inventory available after an order is completed&lt;/li&gt;
&lt;li&gt;Tracking lifetime purchases by customers and sales by salespeople&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that in this iteration, the system will not support automatic replenishment of shirts once inventory reaches 0.&lt;/p&gt;
&lt;h4 id=&#34;representation&#34;&gt;Representation&lt;/h4&gt;
&lt;p&gt;Entities are captured in SQLite tables with the following schema.&lt;/p&gt;
&lt;h5 id=&#34;entities&#34;&gt;Entities&lt;/h5&gt;
&lt;p&gt;The database includes the following entities:&lt;/p&gt;
&lt;h5 id=&#34;stores&#34;&gt;Stores&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;stores&lt;/code&gt; table includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, which specifies the unique ID for the store as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraint applied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;location&lt;/code&gt;, which specifies the city or region where the store is located as &lt;code&gt;TEXT&lt;/code&gt;, given &lt;code&gt;TEXT&lt;/code&gt; is appropriate for city fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;shirts&#34;&gt;Shirts&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;shirts&lt;/code&gt; table includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, which specifies the unique ID for the shirt as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraint applied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;team&lt;/code&gt;, which specifies the shirt&amp;rsquo;s team as &lt;code&gt;TEXT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;, which specifies the shirt size (S, M or L) as &lt;code&gt;TEXT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;price&lt;/code&gt;, which specifies the shirt price as &lt;code&gt;NUMERIC&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All columns in the &lt;code&gt;shirts&lt;/code&gt; table are required and hence should have the &lt;code&gt;NOT NULL&lt;/code&gt; constraint applied. No other constraints are necessary.&lt;/p&gt;
&lt;h5 id=&#34;customers&#34;&gt;Customers&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;customer&lt;/code&gt; table includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, which specifies the unique ID for the customer as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraint applied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first_name&lt;/code&gt;, which specifies the customer&amp;rsquo;s first name as &lt;code&gt;TEXT&lt;/code&gt;, given &lt;code&gt;TEXT&lt;/code&gt; is appropriate for name fields.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_name&lt;/code&gt;, which specifies the customer&amp;rsquo;s last name as &lt;code&gt;TEXT&lt;/code&gt;, given &lt;code&gt;TEXT&lt;/code&gt; is appropriate for name fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All columns that are not primary keys or foreign keys in the &lt;code&gt;customers&lt;/code&gt; table are required, and hence should have the &lt;code&gt;NOT NULL&lt;/code&gt; constraint applied. No other constraints are necessary.&lt;/p&gt;
&lt;h5 id=&#34;salespersons&#34;&gt;Salespersons&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;salespersons&lt;/code&gt; table includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, which specifies the unique ID for the salesperson as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraint applied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first_name&lt;/code&gt;, which specifies the salesperson&amp;rsquo;s first name as &lt;code&gt;TEXT&lt;/code&gt;, given &lt;code&gt;TEXT&lt;/code&gt; is appropriate for name fields.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_name&lt;/code&gt;, which specifies the salesperson&amp;rsquo;s last name as &lt;code&gt;TEXT&lt;/code&gt;, given &lt;code&gt;TEXT&lt;/code&gt; is appropriate for name fields.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store_id&lt;/code&gt;, which specifies the store the salesperson works at, as &lt;code&gt;INTEGER&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All columns that are not primary keys or foreign keys in the &lt;code&gt;salespersons&lt;/code&gt; table are required, and hence should have the &lt;code&gt;NOT NULL&lt;/code&gt; constraint applied. This column &lt;code&gt;store_id&lt;/code&gt; has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;stores&lt;/code&gt; table, which reflects and ensures that each salesperson works in a particular store.&lt;/p&gt;
&lt;h5 id=&#34;orders&#34;&gt;Orders&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;orders&lt;/code&gt; table includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;, which specifies the unique ID for the order as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;PRIMARY KEY&lt;/code&gt; constraint applied.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customer_id&lt;/code&gt;, which specifies the ID of the customer who placed the order as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;customers&lt;/code&gt; table, which ensures that each order be referenced back to a customer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;salesperson_id&lt;/code&gt;, which specifies the ID of the salesperson who sold the order as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;salespersons&lt;/code&gt; table, which ensures that each order be referenced back to a salesperson.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store_id&lt;/code&gt;, which specifies the ID of the store where the shirt was sold, as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;stores&lt;/code&gt; table, which ensures that each order be referenced back to a store.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;, which specifies the type of order (P or R, for &amp;ldquo;purchase&amp;rdquo; or &amp;ldquo;return&amp;rdquo;) as &lt;code&gt;TEXT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date&lt;/code&gt;, which specifies the date of the order, as &lt;code&gt;NUMERIC&lt;/code&gt;. If no value is provided, it will default to the CURRENT_TIMESTAMP.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All columns that are not primary keys or foreign keys in the &lt;code&gt;orders&lt;/code&gt; table are required and hence have the &lt;code&gt;NOT NULL&lt;/code&gt; constraint applied.&lt;/p&gt;
&lt;h5 id=&#34;ordered&#34;&gt;Ordered&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;ordered&lt;/code&gt; table includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;order_id&lt;/code&gt;, which specifies the ID of the order where the shirt was included, as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;orders&lt;/code&gt; table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shirt_id&lt;/code&gt;, which specifies the ID of a shirt in an order, as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;shirts&lt;/code&gt; table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quantity&lt;/code&gt;, which specifies quantity of shirts of each kind ordered, as an &lt;code&gt;INTEGER&lt;/code&gt;. Since an order can be created for a purchase or for a return, &lt;code&gt;quantity&lt;/code&gt; accepts negative values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;PRIMARY KEY&lt;/code&gt; will be the combination of (&lt;code&gt;order_id&lt;/code&gt;, &lt;code&gt;shirt_id&lt;/code&gt;).&lt;/p&gt;
&lt;h5 id=&#34;carried&#34;&gt;Carried&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;carried&lt;/code&gt; table includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;store_id&lt;/code&gt;, which specifies the ID of the store where the order originates, as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;stores&lt;/code&gt; table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shirt_id&lt;/code&gt;, which specifies the ID of a shirt carried in the store, as an &lt;code&gt;INTEGER&lt;/code&gt;. This column thus has the &lt;code&gt;FOREIGN KEY&lt;/code&gt; constraint applied, referencing the &lt;code&gt;id&lt;/code&gt; column in the &lt;code&gt;shirts&lt;/code&gt; table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quantity&lt;/code&gt;, which specifies quantity of shirts of each kind ordered, as an &lt;code&gt;INTEGER&lt;/code&gt;. Since an order can be created for a purchase or for a return, &lt;code&gt;quantity&lt;/code&gt; accepts negative values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;PRIMARY KEY&lt;/code&gt; will be the combination of (&lt;code&gt;store_id&lt;/code&gt;, &lt;code&gt;shirt_id&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&#34;relationships&#34;&gt;Relationships&lt;/h4&gt;
&lt;p&gt;The below entity relationship diagram describes the relationships among the entities in the database.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mariosanchez.org/img/er.jpg&#34; alt=&#34;ER Diagram&#34;&gt;&lt;/p&gt;
&lt;p&gt;As detailed by the diagram:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One store may employ many salespersons, but a salesperson can only work with one store. A store may have a minimum of 0 salespersons (like when everybody quits) but a salesperson needs to be assigned to one store in order to be considered a salesperson.&lt;/li&gt;
&lt;li&gt;One store can carry many shirts (a minimum of 0 if they are out of stock) and any shirt can be sold in many stores (minimum of 1 to be set up in the system).&lt;/li&gt;
&lt;li&gt;One order can include many shirts (with a minimum of 1, otherwise there won&amp;rsquo;t be an order) and each shirt can be purchased in many different orders (with a minimum of 0 if nobody orders that shirt).&lt;/li&gt;
&lt;li&gt;One customer can place many orders (minimum of 1 to be considered a customer) but any order can only be associated to one customer (minimum of 1, otherwise there won&amp;rsquo;t be an order).&lt;/li&gt;
&lt;li&gt;One salesperson can sell many orders (minimum of 0 if it is a new salesperson or one that hasn&amp;rsquo;t sold anything yet) but an order can be sold by only one salesperson (minimum of 1, otherwise there won&amp;rsquo;t be an order).&lt;/li&gt;
&lt;li&gt;A shirt can be sold in many stores (minimum of 1 to be set up in the system), and one store can carry many shirts (a minimum of 0 if they are out of stock).&lt;/li&gt;
&lt;li&gt;A shirt can be purchased in many different orders (with a minimum of 0 if nobody orders that shirt), and one order can include many shirts (with a minimum of 1, otherwise there won&amp;rsquo;t be an order).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;optimizations&#34;&gt;Optimizations&lt;/h4&gt;
&lt;p&gt;Per the typical queries in &lt;code&gt;queries.sql&lt;/code&gt;, it is common for users of the database to want to obtain reports based on a certain shirt being ordered. For that reason, indexes are created on the &lt;code&gt;order_id&lt;/code&gt; and &lt;code&gt;shirt_id&lt;/code&gt; on the &lt;code&gt;ordered&lt;/code&gt; table so that those reports are obtained faster.&lt;/p&gt;
&lt;p&gt;Similarly, it is also common practice for a user of the database to concerned with viewing orders and sales per customer, or orders and sales to one particular customer. As such, an index is created on the &lt;code&gt;customer_id&lt;/code&gt; column in the &lt;code&gt;orders&lt;/code&gt; table to speed the identification of customers.&lt;/p&gt;
&lt;h4 id=&#34;limitations&#34;&gt;Limitations&lt;/h4&gt;
&lt;p&gt;The current schema includes a trigger to automatically update inventory every time a shirt is sold. In order to avoid out-of-stock situations, our trigger uses a CASE statement that automatically replenishes the stock to 5 if a customer orders a quantity of shirts larger than the inventory on hand. In other words, if a store has 3 shirts in stock but the customer wants to buy 5, the store automatically orders 8 shirts: 3 to send to the customer (so the order is honored) and 5 to keep in inventory. We assume instant delivery of those 8 shirts, which in real life probably won&amp;rsquo;t be possible: a real life scenario would probably involve notifying the customer of the out-of-stock situation, asking them to come back after a few days to allow for delivery time of the replenishment order.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RSVP App with Bottle and SQLite</title>
      <link>https://mariosanchez.org/code/bottle-sql/</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/bottle-sql/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python and &lt;i class=&#34;fas fa-database&#34;&gt;&lt;/i&gt; SQLite&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/bottle-sql&#34;&gt;Source Files&lt;/a&gt;&lt;/p&gt;&lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;This is a simple web application that let&amp;rsquo;s users rsvp for a party, indicating their name, number of people coming with them, and what will they bring.&lt;/p&gt;
&lt;p&gt;The app implements routes using the &lt;a href=&#34;https://bottlepy.org&#34;&gt;Bottle&lt;/a&gt; web framework, following the &lt;a href=&#34;https://www.geeksforgeeks.org/mvc-design-pattern/#&#34;&gt;MVC design pattern&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&#34;routes&#34;&gt;Routes&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt; (or index route): This route renders the entry point to the app, and presents the user with a web form to fill in their information. All fields are required. If any field is not completed, the app will re-route the user to the same page to try again. If all input has been entered and is valid, the user will be directed to a confirmation page where a message will indicate that their rsvp was successful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/registered&lt;/code&gt;: This route uses the HTTP &lt;code&gt;POST&lt;/code&gt; method (as indicated in the route decorator). It captures information from the user via Bottle&amp;rsquo;s &lt;code&gt;request&lt;/code&gt; object, loads that information to our database, and sends the information to the &lt;code&gt;registered.tpl&lt;/code&gt; template to display a message signaling the user&amp;rsquo;s successful rsvp for the event (e.g. &amp;lsquo;Mario party of 4 will bring beer&amp;rsquo;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/going&lt;/code&gt; (list of people attending): This route displays a list of the people who have rsvp&amp;rsquo;ed, together with the number of people coming with them and what will they bring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/&amp;lt;food&amp;gt;&lt;/code&gt;: This is a dynamic route that displays an unordered list of people who have commited to bringing the particular food listed in the URL. The way Bottle works allows this part of the URL to be passed as an argument to the function and then to the templates. This route shares a template with the &lt;code&gt;/going&lt;/code&gt; route.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;database&#34;&gt;Database&lt;/h5&gt;
&lt;p&gt;The app uses a SQLite database to store the information. The database is accessed from the app via connections, as needed. The two main operations are: add a user to the database (&lt;code&gt;INSERT&lt;/code&gt;), and retrieve (&lt;code&gt;SELECT&lt;/code&gt;) users for display in the attendees list, or list of attendees bringing a particular food. Before the database can be used it needs to be created (in this case &lt;code&gt;rsvp.db&lt;/code&gt;) and initialized with a table (which we named &lt;code&gt;reserved&lt;/code&gt;). To create our database and our table, we run the following command once: &lt;code&gt;python3 create_db.py&lt;/code&gt; prior to running our app.&lt;/p&gt;
&lt;h5 id=&#34;templates&#34;&gt;Templates&lt;/h5&gt;
&lt;p&gt;The app uses Bottle&amp;rsquo;s default Simple Template Engine. The &lt;code&gt;header&lt;/code&gt; and the &lt;code&gt;footer&lt;/code&gt; are stored in their own templates, which can be called by any other template. That way, if there are any changes to the header or footer we only have to change those pages instead of every page of our site.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;index.tpl&lt;/code&gt; displays the main page of our application, containing an HTML form to capture information from the user. The form implements three types of input: text input, drop down menu and radio buttons. We capture information and send it to the app via Bottle&amp;rsquo;s &lt;code&gt;request&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;registered.tpl&lt;/code&gt; displays a confirmation message after users successfully rsvp for the event.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;going.tpl&lt;/code&gt; template shows an implementation of a python &lt;code&gt;for&lt;/code&gt; loop and &lt;code&gt;if&lt;/code&gt; statements, to generate the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements on a list of attendees. &lt;code&gt;for&lt;/code&gt; loops, as well as &lt;code&gt;while&lt;/code&gt; loops and &lt;code&gt;if-else&lt;/code&gt; statements, need to be preceded by &lt;code&gt;%&lt;/code&gt; and closed with &lt;code&gt;% end&lt;/code&gt; in order to work. &lt;strong&gt;Important note&lt;/strong&gt;: you don&amp;rsquo;t need to use curly brackets around the variables in loops and conditional statements, only in the HTML.&lt;/p&gt;
&lt;p&gt;Note that we are using the &lt;code&gt;going.tpl&lt;/code&gt; template for two different views: the attendee list, and the different food specific pages listing the people bringing that food. We implemented this using &lt;code&gt;if-else&lt;/code&gt; conditions that evaluate the length of the arguments passed to the template: if length is 3, we can assume we need to display the list of attendees. If we only pass the name of the person and the food type, we can asume we need to display the contents of the food specific view. Notice also that we print a specific message when nobody is bringing a particular food (e.g. &amp;ldquo;So far, nobody is bringing salad :&amp;quot;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pynt: A Static Site Generator Made with Python</title>
      <link>https://mariosanchez.org/code/pynt/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/pynt/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/pynt-ssg&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://mariosanchez.org/pynt-ssg/html/&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;img-srcimgpynt-grpng&#34;&gt;&lt;img src=&#34;https://mariosanchez.org/img/pynt-gr.png&#34;&gt;&lt;/h2&gt;
&lt;h5 id=&#34;description&#34;&gt;Description:&lt;/h5&gt;
&lt;p&gt;Pynt is a pint-sized static site generator with basic blog capabilities written in Python in less than 100 lines of code. It doesn&amp;rsquo;t use any web framework, just pure Python functionality.&lt;/p&gt;
&lt;h5 id=&#34;why&#34;&gt;Why&lt;/h5&gt;
&lt;p&gt;A few years back I became familiar with static site generators (there are &lt;a href=&#34;https://staticsitegenerators.net/&#34;&gt;many of them&lt;/a&gt;). I tried several: Jekyll, Metalsmith, Hugo, etc. I was always fascinated by the way they worked and how a user could create a working static website with minimal effort at a click of a button. I always wondered if one day I would be able to write one, so I took the opportunity of CS50P&amp;rsquo;s final project to build one.&lt;/p&gt;
&lt;h5 id=&#34;summary&#34;&gt;Summary&lt;/h5&gt;
&lt;p&gt;Pynt takes the Markdown located in the &lt;code&gt;md&lt;/code&gt; directory and converts them to HTML. The generated HTML files are placed in an &lt;code&gt;html&lt;/code&gt; folder that can then be deployed to the web.&lt;/p&gt;
&lt;h5 id=&#34;how-it-works&#34;&gt;How It Works&lt;/h5&gt;
&lt;p&gt;a. Pynt opens each Markdown file and convert the contents to HTML&lt;/p&gt;
&lt;p&gt;b. Pynt saves the HTML files in the &lt;code&gt;html&lt;/code&gt; directory&lt;/p&gt;
&lt;p&gt;c. Pynt generates a blog posts list page that displays links to all posts, organized in reverse chronological order (newer post first). By default, this is the home page of our site.&lt;/p&gt;
&lt;h5 id=&#34;content-types&#34;&gt;Content Types&lt;/h5&gt;
&lt;p&gt;The program accomodates two types of content: blog posts and pages. Blog posts are entries that contain a date. Pages, on the other hand, don&amp;rsquo;t contain a date, since they are static in nature (e.g. About and Contact pages).  The program is smart enough to differentiate between blog posts and pages when it&amp;rsquo;s time to generate the blog posts list page: it filters out pages and only parses blog posts.&lt;/p&gt;
&lt;h5 id=&#34;views&#34;&gt;Views&lt;/h5&gt;
&lt;p&gt;Since we are not using a web framework, the HTML files are built using string concatenation. We have defined four global variables at the top of the file that represent the common areas in all pages in the site: &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt; and &lt;code&gt;footer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the process, we use regular expressions to extract information like dates and titles from the Markdown files, so that we can then use them for tasks like sorting blog posts and retrieving post and page titles.&lt;/p&gt;
&lt;p&gt;Pynt uses the &lt;a href=&#34;https://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt; framework for styling.&lt;/p&gt;
&lt;h5 id=&#34;functions&#34;&gt;Functions&lt;/h5&gt;
&lt;p&gt;We have separated our main function from several other auxiliary functions that in turn return a value to main. The functions we declared, in order of invocation, are:&lt;/p&gt;
&lt;h5 id=&#34;extract_md_content&#34;&gt;&lt;code&gt;extract_md_content&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Takes a file name as argument, opens a Markdown file, reads the content of the file and sends it to the &lt;code&gt;validate_docs&lt;/code&gt; function for date format validation. If the validation comes back OK the function converts the list of lines into a string by using the &lt;code&gt;join()&lt;/code&gt; method and returns it to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;create_html-file&#34;&gt;&lt;code&gt;create_html-file&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This function takes the string returned by the &lt;code&gt;extract_md_content&lt;/code&gt; function and with the help of the &lt;code&gt;markdown2&lt;/code&gt; module that we have previously imported converts it to HTML. Then, the function writes the HTML into files located in the &lt;code&gt;html&lt;/code&gt; directory. These files can later be deployed to any web server on the Internet for the site to be live.&lt;/p&gt;
&lt;h5 id=&#34;build_post_links&#34;&gt;&lt;code&gt;build_post_links&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;This function creates the blog post links to be displayed in the post list page. For this, it opens each Markdown file and selects only those that are posts (i.e. those that have a date as part of the content). If so, it then uses regular expressions to extract the title of the post, and together with the file name and date create the actual HTML link to the post page and return the HTML string to &lt;code&gt;main&lt;/code&gt;. We repeat the operation for all blog posts.&lt;/p&gt;
&lt;h5 id=&#34;build_index_page&#34;&gt;&lt;code&gt;build_index_page&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;After the &lt;code&gt;main&lt;/code&gt; function has sorted all the links in reverse chronological order (extracting the date via regular expressions) it will pass the HTML string with all the links to &lt;code&gt;build_index_page&lt;/code&gt;. Here, the function will concatenate the header, the list of links, and the footer to create the HTML for the lists page.&lt;/p&gt;
&lt;h5 id=&#34;validate_docs&#34;&gt;&lt;code&gt;validate_docs&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Helper function invoqued by &lt;code&gt;extract_md_content&lt;/code&gt;, with the purpose of determining if the document is either a page or a post.&lt;/p&gt;
&lt;h5 id=&#34;validate_date&#34;&gt;&lt;code&gt;validate_date&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Helper function invoqued by &lt;code&gt;validate_docs&lt;/code&gt; to check that the date included with the post is in a valid format: YYYY-MM-DD&lt;/p&gt;
&lt;h5 id=&#34;run_server&#34;&gt;&lt;code&gt;run_server()&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Function created to open up a web server on &lt;code&gt;localhost:8000&lt;/code&gt; to be able to see our website during development&lt;/p&gt;
&lt;h5 id=&#34;modules&#34;&gt;Modules&lt;/h5&gt;
&lt;p&gt;We imported a few modules and libraries to help us implement the site:&lt;/p&gt;
&lt;h5 id=&#34;markdown2&#34;&gt;&lt;code&gt;markdown2&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;To help us convert markdown files into HTML&lt;/p&gt;
&lt;h5 id=&#34;re&#34;&gt;&lt;code&gt;re&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;For regular expressions capabilities&lt;/p&gt;
&lt;h5 id=&#34;os&#34;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Used to call the &lt;code&gt;os.listdir()&lt;/code&gt; function to generate a list of markdown files&lt;/p&gt;
&lt;h5 id=&#34;validator-collection&#34;&gt;&lt;code&gt;validator-collection&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;To validate our dates&lt;/p&gt;
&lt;h5 id=&#34;http-server-and-socketserver&#34;&gt;&lt;code&gt;http-server&lt;/code&gt; and &lt;code&gt;socketserver&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;To open a web server for development&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mariosanchez.org/img/pynt_ss.png&#34; /&gt;&lt;img src=&#34;https://mariosanchez.org/img/pynt_ss.png&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;usage&#34;&gt;Usage&lt;/h5&gt;
&lt;p&gt;This is the process a user would follow to add a new blog post or create a new page for the site:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open a markdown file from the &lt;code&gt;md&lt;/code&gt; directory, preferrably and old post or page, to use as a template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the user wants to write a post, type the word &amp;ldquo;post&amp;rdquo; in the first line of the file. If the user wants to write a page, type the word &amp;ldquo;page&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If writing a post, include a date in the second line, following this exact format: YYYY-MM-DD. If writing a page, don&amp;rsquo;t need to type a date&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the blog post content starting with the title followed by the body of the post. Use Markdown to write posts and pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once finished, save the file (make sure that you saved it with a .md extension and in the &lt;code&gt;md&lt;/code&gt; directory)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the project folder on the command line and type: &lt;code&gt;python3 project.py&lt;/code&gt; and hit Enter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Follow the link displayed in the terminal, and if everything went right the site should be visible in the browser window.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;deployment&#34;&gt;Deployment&lt;/h5&gt;
&lt;p&gt;Take all the HTML files in the &lt;code&gt;html&lt;/code&gt; folder and upload them to any web server, like Heroku or Github Pages&lt;/p&gt;
&lt;h5 id=&#34;video-demo&#34;&gt;Video Demo&lt;/h5&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/iSyWYh9aZYk&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
    </item>
    
    <item>
      <title>Auction Site with Django</title>
      <link>https://mariosanchez.org/code/commerce/</link>
      <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/commerce/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python&lt;/p&gt;
&lt;p class=&#34;bullet list&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/cs50w-commerce&#34;&gt;Source Files&lt;/a&gt;  &lt;a href=&#34;http://mariosanchezcarrion.com:8000&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;This app was my implementation of &lt;a href=&#34;https://cs50.harvard.edu/web/2020/projects/2/commerce/&#34;&gt;CS50W&lt;/a&gt;&amp;rsquo;s Project 2, which involves Django, SQL, Models and Migrations.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/8TZa5IB4Q-g&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Here are the specs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Models&lt;/strong&gt;: Your application should have at least three models in addition to the User model: one for auction listings, one for bids, and one for comments made on auction listings. It’s up to you to decide what fields each model should have, and what the types of those fields should be. You may have additional models if you would like.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create Listing&lt;/strong&gt;: Users should be able to visit a page to create a new listing. They should be able to specify a title for the listing, a text-based description, and what the starting bid should be. Users should also optionally be able to provide a URL for an image for the listing and/or a category (e.g. Fashion, Toys, Electronics, Home, etc.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Active Listings Page&lt;/strong&gt;: The default route of your web application should let users view all of the currently active auction listings. For each active listing, this page should display (at minimum) the title, description, current price, and photo (if one exists for the listing).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Listing Page&lt;/strong&gt;: Clicking on a listing should take users to a page specific to that listing. On that page, users should be able to view all details about the listing, including the current price for the listing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the user is signed in, the user should be able to add the item to their “Watchlist.” If the item is already on the watchlist, the user should be able to remove it.&lt;/li&gt;
&lt;li&gt;If the user is signed in, the user should be able to bid on the item. The bid must be at least as large as the starting bid, and must be greater than any other bids that have been placed (if any). If the bid doesn’t meet those criteria, the user should be presented with an error.&lt;/li&gt;
&lt;li&gt;If the user is signed in and is the one who created the listing, the user should have the ability to “close” the auction from this page, which makes the highest bidder the winner of the auction and makes the listing no longer active.&lt;/li&gt;
&lt;li&gt;If a user is signed in on a closed listing page, and the user has won that auction, the page should say so.&lt;/li&gt;
&lt;li&gt;Users who are signed in should be able to add comments to the listing page. The listing page should display all comments that have been made on the listing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Watchlist&lt;/strong&gt;: Users who are signed in should be able to visit a Watchlist page, which should display all of the listings that a user has added to their watchlist. Clicking on any of those listings should take the user to that listing’s page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;: Users should be able to visit a page that displays a list of all listing categories. Clicking on the name of any category should take the user to a page that displays all of the active listings in that category.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Django Admin Interface&lt;/strong&gt;: Via the Django admin interface, a site administrator should be able to view, add, edit, and delete any listings, comments, and bids made on the site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m very proud of the way the project ended up working and looking. This was by far the hardest project I&amp;rsquo;ve attempted and I&amp;rsquo;m glad it is now working as expected.&lt;/p&gt;
&lt;p&gt;If you want to learn more about this project here are some links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mariobox/cs50w-commerce&#34;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mariosanchezcarrion.com:8000&#34;&gt;Working Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/8TZa5IB4Q-g&#34;&gt;Youtube Video&lt;/a&gt; of the site in action&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Wikipedia Clone with Django</title>
      <link>https://mariosanchez.org/code/wiki/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/wiki/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/cs50w-wiki&#34;&gt;Source Files&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This project is part of the &lt;a href=&#34;https://cs50.harvard.edu/web/2020/&#34;&gt;CS50W Web Applications with Python and JavaScript&lt;/a&gt; online course.&lt;/p&gt;
&lt;p&gt;It doesn&amp;rsquo;t use models, just views and templates, to build a wiki page. The program reads through a folder filled with entries written in Markdown, converts them to HTML and sends the HTML to Django templates.&lt;/p&gt;
&lt;p&gt;The specs call for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A home page that lists the titles of all the entries and links to each individual entry page&lt;/li&gt;
&lt;li&gt;Search functionality&lt;/li&gt;
&lt;li&gt;Random page generator&lt;/li&gt;
&lt;li&gt;The ability to edit entries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a short video of the final product:&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WpccTnF1qcA&#34; title=&#34;YouTube video player&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
    </item>
    
    <item>
      <title>URL Shortener with Python</title>
      <link>https://mariosanchez.org/code/shorten/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/shorten/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/url-shortener&#34;&gt;Source Files&lt;/a&gt; &lt;hr class=&#34;art&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is a practice project in Python. We will create a Python program to shorten URLs using &lt;a href=&#34;https://bitly.com&#34;&gt;Bitly&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://dev.bitly.com/&#34;&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course we can always shorten URLs directly from the Bitly page, but we don&amp;rsquo;t want to do that. We want to be able to do it straight from our computer&amp;rsquo;s command line, and to store each URL key value pair (long url, short url) in a CSV file in our computer.&lt;/p&gt;
&lt;p&gt;The basic process to shorten a URL, whether you&amp;rsquo;re using Bitly&amp;rsquo;s website or the command line, involves sending a POST request to the server, with some credentials in a header object, and some parameters (one of them being the long URL you want to shorten).&lt;/p&gt;
&lt;p&gt;If Bitly&amp;rsquo;s server accepts your credentials and your post request was structured correctly, you should get back your shortened URL.&lt;/p&gt;
&lt;p&gt;We start by importing Python &lt;code&gt;requests&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we ask the user to input the long URL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;long_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Input long URL: &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then create our &lt;code&gt;headers&lt;/code&gt; object where we will pass our Authorization Token (to get your Authorization Token you need to get a Bitly account and go to your profile settings). Make sure you replace {TOKEN} with your own Bitly authorization token:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Bearer &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{TOKEN}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we create a GET request passing our headers object to the server in order to get our Group ID (&lt;code&gt;guid&lt;/code&gt; in the code snippet below) which we will need for our POST request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;groups_res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api-ssl.bitly.com/v4/groups&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups_res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status_code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# if response is OK, get the GUID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;groups_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups_res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;groups&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;guid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;guid&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[!] Cannot get GUID, exiting...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we create our POST request, passing along our headers and our data parameters, which includes the long URL we want to shorten:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;long_url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;long_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;domain&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bit.ly&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group_guid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guid&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api-ssl.bitly.com/v4/shorten&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If everything went well, we will get a response object from which we can extract our short URL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;short_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can then either instruct the program to print the short URL to the console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Your short link is: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we can send the (long URL, short URL) key value pair to a CSV file if we want to store all our short URLs in one place:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;urls.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;long_url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;short_url&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/mariobox/url-shortener&#34;&gt;source code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(In the source code you will see a small variation of this program, since I decided to store my Authorization Token in the &lt;code&gt;.bashrc&lt;/code&gt; file as an environment variable.&lt;/p&gt;
&lt;p&gt;To get an environment variable in Python you need to import the &lt;code&gt;os&lt;/code&gt; module and call the variable like this: &lt;code&gt;variable = os.environ[&#39;YOUR_VARIABLE_NAME&#39;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This comes in handy when you have sensitive information like passwords and API keys that you don&amp;rsquo;t want others to see in case your source code is public.)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Today&#39;s Moon Phase With JavaScript</title>
      <link>https://mariosanchez.org/code/moon/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/moon/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/moon-phases/&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://mariobox.github.io/moon-phases/&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;I wanted a simple web page to show today&amp;rsquo;s date, moon phase and percentage illumination, plus a nice picture of the moon.&lt;/p&gt;
&lt;img src=&#34;https://mariosanchez.org/img/moon.jpg&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em &#34;&gt;
&lt;p&gt;My first step was to find an API that I could call to retrieve today&amp;rsquo;s moon phase and illumination. After some research I found the &lt;a href=&#34;https://farmsense.net&#34;&gt;Farmsense&lt;/a&gt; moon phase API. The API accepts a date as a parameter, formatted in milliseconds (&lt;a href=&#34;https://currentmillis.com/&#34;&gt;Unix Time&lt;/a&gt;), but only takes the first ten digits.&lt;/p&gt;
&lt;p&gt;One problem with Unix time is that it&amp;rsquo;s in &lt;a href=&#34;https://www.timeanddate.com/time/aboututc.html&#34;&gt;UTC-Coordinated Universal Time&lt;/a&gt;. To change it to Eastern Standard Time I had to subtract five hours in milliseconds from the current UTC time. I then pass the first ten digits of that value to the API&amp;rsquo;s end point url.&lt;/p&gt;
&lt;p&gt;Next, I made an AJAX call using the &lt;code&gt;fetch&lt;/code&gt; API and transformed the response to JSON format to be able to use it.&lt;/p&gt;
&lt;p&gt;Then, it was just matter of pulling the info we wanted to display from the response, and asigning it to the appropriate &lt;code&gt;div&lt;/code&gt; in the &lt;code&gt;index.html&lt;/code&gt; file via &lt;code&gt;document.getElementById&lt;/code&gt; statements.&lt;/p&gt;
&lt;p&gt;Since I wanted to show nice pictures of the moon instead of run-off-the-mill icons, I went to &lt;a href=&#34;https://svs.gsfc.nasa.gov/Gallery/moonphase.html&#34;&gt;NASA&amp;rsquo;s website&lt;/a&gt; and downloaded their moon pictures (which is allowed for educational purposes).&lt;/p&gt;
&lt;p&gt;To match the moon phase pulled from the Farmsense API to the right moon phase picture I used a simple &lt;code&gt;switch&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;You can see the app in action here:&lt;/p&gt;
&lt;iframe src=&#34;https://mariobox.github.io/moon-phases/&#34; title=&#34;description&#34; width=100% height=&#34;550px&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    
    <item>
      <title>Covid-19 Dashboard</title>
      <link>https://mariosanchez.org/code/covid19/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/covid19/</guid>
      <description>&lt;img src=&#34;https://mariosanchez.org/img/covid.png&#34;&gt;
&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python&lt;/p&gt;
&lt;p class=&#34;bullet list&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/covid-dashboard&#34;&gt;Source Files&lt;/a&gt;  &lt;a href=&#34;http://mariosanchezcarrion.com:1313&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt;&lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;This is a practice project in Python using the Covid package, which lets us retrieve information about Covid-19 from John Hopkins API.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;application.py&lt;/code&gt; file contains our program logic.&lt;/p&gt;
&lt;p&gt;We start by importing the package that will provide us with the data:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from covid import Covid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The data comes in the form of a list of dictionaries (or if you&amp;rsquo;re more used to JS parlance, an array of objects). You can learn more about this package &lt;a href=&#34;https://pypi.org/project/covid/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then we need to import Flask, since we want our dashboard to be viewed on a webpage, not the console. Flask is a lightweight web framework that works with Python.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from flask import Flask, redirect, render_template, request&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, we assign our Flask application to a variable:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app = Flask(__name__)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We then make a call to the covid package and sort our list of dictionaries so that the countries with the higher number of deaths are listed first (the data originally comes sorted by descending number of confirmed cases):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;covid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deaths&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We then format the numeric fields we&amp;rsquo;re interested in so that they display with a &amp;ldquo;,&amp;rdquo; delimiting thousands and millions, to make the data more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;country&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;confirmed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;confirmed&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deaths&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;country&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;deaths&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re now ready to define our route for the home page of our web app. This route will render the &lt;code&gt;index.html&lt;/code&gt; template (the only page of our web app). When we configure our route, we pass to the template a parameter &lt;code&gt;data=d&lt;/code&gt; which contains our data. The &lt;code&gt;index.html&lt;/code&gt; template will then use this data to build the web page that will be visible to the user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@app.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;render_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; page is a Jinja template enhanced with Bootstrap styling to make our table look nice.&lt;/p&gt;
&lt;p&gt;To run this code on your computer you need to access the FLASK_APP enviroment variable by typing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export FLASK_APP=application.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;from the command line, followed by:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flask run&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We could do other things with our app, like allowing users to sort by different criteria, display only a limited amount of data, or grab more information from other sources. For now, though, the app is done and it accomplishes what I set out to do.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mailing List Form with Express and CSV</title>
      <link>https://mariosanchez.org/code/csvlist/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/csvlist/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-node&#34;&gt;&lt;/i&gt; Node and Express&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/add-to-mailing-list&#34;&gt;Source Files&lt;/a&gt;&lt;/p&gt;
&lt;hr class=&#34;art&#34; /&gt;
&lt;p&gt;This is a simple server-side application made with Node and Express.&lt;/p&gt;
&lt;img src=&#34;https://mariosanchez.org/img/csvlist.png&#34;&gt;
&lt;p&gt;Instead of using a more advance data base, we used a super simple CSV file to store our data, and took advantage of the &lt;code&gt;fs&lt;/code&gt; Node module and the &lt;code&gt;neat-csv&lt;/code&gt; package to convert string information from our CSV database into an array of objects that we can then pass along to our &lt;code&gt;success&lt;/code&gt; template made with Pug. The &lt;code&gt;success&lt;/code&gt; page displays all the entries of our CSV file.&lt;/p&gt;
&lt;p&gt;To try it in your computer you can clone the &lt;a href=&#34;https://github.com/mariobox/add-to-mailing-list&#34;&gt;repository&lt;/a&gt; and then type &lt;code&gt;nodejs app.js&lt;/code&gt; from the command line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pizza Selector</title>
      <link>https://mariosanchez.org/code/pizza/</link>
      <pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/pizza/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/pizza-selector&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://mariobox.github.io/pizza-selector&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;hr class=&#34;art&#34; /&gt;
&lt;img src=&#34;https://mariosanchez.org/img/pizzas.png&#34;&gt;
&lt;p&gt;JavaScript program to choose only the pizzas with the ingredientes you want.&lt;/p&gt;
&lt;p&gt;Select the ingredients you don&amp;rsquo;t want from a list of options and hit the submit button. The program will only show you pizzas with ingredients you want.&lt;/p&gt;
&lt;p&gt;The script uses a plain vanilla &lt;code&gt;XMLHttpRequest&lt;/code&gt; to bring the pizza information from a JSON file. They iterates over all pizzas and all ingredients in a pizza setting the property &amp;ldquo;wanted&amp;rdquo; to false if the pizza contains any ingrediente selected in the not-wanted list.&lt;/p&gt;
&lt;p&gt;Finally, the script displays only the pizzas containing ingredients you want.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Donate Button with Paypal Integration</title>
      <link>https://mariosanchez.org/code/ppl/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/ppl/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-node&#34;&gt;&lt;/i&gt; Node and Express&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/donate-paypal&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;http://mariosanchezcarrion.com:3030&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;hr class=&#34;art&#34; /&gt;
&lt;p&gt;I got the inspiration for this project from &lt;a href=&#34;https://willem.com/blog/2020-03-25_designing-and-implementing-a-micro-payment-system/&#34;&gt;this post&lt;/a&gt; in Willem Middelkoop&amp;rsquo;s blog. While Willem&amp;rsquo;s post went through the basic process, it didn&amp;rsquo;t provide detaied instructions on how to make this work on an actual server, or how to interact with the payment platform&amp;rsquo;s API. That&amp;rsquo;s when I went online and searched for tutorials and videos that might help me.&lt;/p&gt;
&lt;p&gt;Fortunately, I run across &lt;a href=&#34;https://www.youtube.com/watch?v=7k03jobKGXM&amp;amp;t=1299s&#34;&gt;this video&lt;/a&gt; by Brad Traversy that does a wonderful job of explaining how to tie a basic &lt;strong&gt;Node/Express&lt;/strong&gt; server with &lt;strong&gt;Paypal&lt;/strong&gt;. However, I wanted to go a step further and not only get the application to work in my own computer but on a Virtual Private Server accessible from the Internet. It just happens that Brad had already created &lt;a href=&#34;https://www.youtube.com/watch?v=oykl1Ih9pMg&amp;amp;t=370s&#34;&gt;this other video&lt;/a&gt; that teaches you how to deploy a basic Node/Express app in a VPS, together with domain name mapping and HTTPS certification. The video comes with &lt;a href=&#34;https://gist.github.com/bradtraversy/cd90d1ed3c462fe3bddd11bf8953a896&#34;&gt;detailed written instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rather than explain every single detail, which Brad can do better than me, I&amp;rsquo;m going to lay out the basic steps I took:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) Build a basic Node/Express app:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Set our template engine of choice
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;view engine&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ejs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;&#39;index&#39;&lt;/code&gt; is a the page where our donation form is located.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you&amp;rsquo;re not familiar with &lt;a href=&#34;https://expressjs.com&#34;&gt;how Express works&lt;/a&gt;, you may want to familiarize yourself with that first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Get a virtual private server at Digital Ocean:&lt;/strong&gt;
That&amp;rsquo;s where you will deploy your application. This process involves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign up&lt;/li&gt;
&lt;li&gt;Create a Droplet (Digital Ocean&amp;rsquo;s name for their virtual private servers)&lt;/li&gt;
&lt;li&gt;Make a note of your assigned I.P. address (you will need it later)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It may be useful at this point to learn how log into your droplet via SSH (so you don&amp;rsquo;t need to use a password), and to how create a new user with &lt;strong&gt;sudo&lt;/strong&gt; privileges so that you don&amp;rsquo;t have to log in as &lt;strong&gt;root&lt;/strong&gt;. &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04&#34;&gt;Follow this tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) Get a domain name and point it to your Digital Ocean virtual private server&lt;/strong&gt;. &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars&#34;&gt;Follow these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4) Deploy your basic Express app in your virtual private server&lt;/strong&gt;:
You can either copy the files one by one, or push your app to a Github repository and then clone it in your VPS. You may want to install a process manager like &lt;a href=&#34;https://pm2.keymetrics.io/&#34;&gt;PM2&lt;/a&gt; so that your application runs all the time, even when you log out of your server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5) Create a NGINX web server and configure it&lt;/strong&gt; so that your Express app is not just visible through a port (e.g. &lt;em&gt;domain.com:3000&lt;/em&gt;) but through your plain domain: &lt;em&gt;domain.com&lt;/em&gt;. This process is known as setting up the NGINX server as a reverse proxy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6) Create a Paypal dummy business account and a personal account&lt;/strong&gt;: You need to sign up at &lt;a href=&#34;https://developer.paypal.com&#34;&gt;developer.paypal.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7) Add routes and functionality to your Express app&lt;/strong&gt; so that the Donate button becomes fully functional.&lt;/p&gt;
&lt;p&gt;Steps &lt;strong&gt;1&lt;/strong&gt; to &lt;strong&gt;5&lt;/strong&gt; are covered in &lt;a href=&#34;https://www.youtube.com/watch?v=oykl1Ih9pMg&amp;amp;t=370s&#34;&gt;this video&lt;/a&gt; and its &lt;a href=&#34;https://gist.github.com/bradtraversy/cd90d1ed3c462fe3bddd11bf8953a896&#34;&gt;companion notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Steps &lt;strong&gt;6&lt;/strong&gt; and &lt;strong&gt;7&lt;/strong&gt; are covered in &lt;a href=&#34;https://www.youtube.com/watch?v=7k03jobKGXM&amp;amp;t=1299s&#34;&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;hr class=&#34;art&#34; /&gt;
&lt;p&gt;My demo is now finished and fully functional.&lt;/p&gt;
&lt;p&gt;If you want to try it out, click on the Donate button below and use these dummy credentials so you can go through the motions in Paypal&amp;rsquo;s sandbox environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Email: sb-akf271945802@personal.example.com
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Password: BmWWp#S4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;iframe src=&#34;http://mariosanchezcarrion.com:3030&#34; width=&#34;100%&#34; height=&#34;500px&#34;&gt;&lt;/iframe&gt;
&lt;p class=&#34;small&#34;&gt;&lt;em&gt;&lt;strong&gt;DON&#39;T WORRY&lt;/strong&gt;: You won&#39;t get charged. This is a dummy environment!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Demo Site with Node and Express</title>
      <link>https://mariosanchez.org/code/express/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/express/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-node&#34;&gt;&lt;/i&gt; Node and Express&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/express-demo&#34;&gt;Source Files&lt;/a&gt;  &lt;a href=&#34;https://mjq48.sse.codesandbox.io/&#34;&gt;Live Demo&lt;/a&gt; &lt;hr class=&#34;art&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/express-demo&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://mjq48.sse.codesandbox.io/&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;hr class=&#34;art&#34; /&gt;
&lt;p&gt;Before we go to our example site, let&amp;rsquo;s talk about Express:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://expressjs.com/&#34;&gt;Express&lt;/a&gt; is a web framework usually paired with Node. It is a light weight tool that makes it easy to build dynamic web applications.&lt;/p&gt;
&lt;p&gt;Since Express is made with JavaScript, you can install it directly from &lt;abbr title=&#34;Node Package Manager&#34;&gt;&lt;a href=&#34;https://www.npmjs.com&#34;&gt;NPM&lt;/a&gt;&lt;/abbr&gt;. Once you &lt;a href=&#34;https://expressjs.com/en/starter/installing.html&#34;&gt;install it&lt;/a&gt;, you can build your first Express aplication: a simple &lt;strong&gt;Hello World!&lt;/strong&gt; message displayed when you access the &lt;code&gt;/&lt;/code&gt; route, or the root of your website (usually that will be your home page):&lt;/p&gt;
&lt;p&gt;Open your text editor and create a file called &lt;code&gt;app.js&lt;/code&gt; (make sure that during your installation you set the &lt;strong&gt;entry point&lt;/strong&gt; in your &lt;code&gt;package.json&lt;/code&gt; as &lt;code&gt;app.js&lt;/code&gt; instead of &lt;code&gt;index.js&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Then type the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first two lines indicate that you want to import Express and that you will assign it to a variable called &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The port is where you will see your application at work: &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, you will tell the program that when you go to the home page via your root &lt;code&gt;/&lt;/code&gt; route, you want it to &lt;strong&gt;send&lt;/strong&gt; the phrase &lt;strong&gt;Hello World!&lt;/strong&gt; to the browser.&lt;/p&gt;
&lt;p&gt;Finally, you instruct the app to listen for changes in port 3000.&lt;/p&gt;
&lt;p&gt;Once all that is set up, save the file, go to your command line, and type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;node app.js 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, navigate to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;, and you should see this in the browser:&lt;/p&gt;
&lt;p&gt;Hello World!&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s say that instead of sending just text you want to send an HTML snippet, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;This is my new website.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save your work, run &lt;code&gt;node app.js&lt;/code&gt; again and refresh your browser. You should see someting like this:&lt;/p&gt;
&lt;h1&gt;Hello World!&lt;/h1&gt;
&lt;p&gt;This is my new website.&lt;/p&gt;
&lt;p&gt;Sending a bunch of loose HTML is not very common, though. Most of the time you would like to send a proper HTML document. You just have to place the previous code in an &lt;code&gt;index.html&lt;/code&gt; file, save the file in the &lt;code&gt;views&lt;/code&gt; folder (Express will find it) and use the &lt;code&gt;render&lt;/code&gt; method instead of &lt;code&gt;send&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result will be the same as before:&lt;/p&gt;
&lt;h1&gt;Hello World!&lt;/h1&gt;
&lt;p&gt;This is my new website.&lt;/p&gt;
&lt;p&gt;But you can go a step further, and ask Express to insert variables to your websites! Here is where the dynamic nature of Express starts to shine. You can use any templating engine, for example &lt;a href=&#34;https://pugjs.org/api/getting-started.html&#34;&gt;Pug&lt;/a&gt;, and create an &lt;code&gt;index.pug&lt;/code&gt; file that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;block content
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    h1 Hello World!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    p My name is &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, just pass an object with the variable &lt;strong&gt;name&lt;/strong&gt; with your render method, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Joe&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And your website will display:&lt;/p&gt;
&lt;h1&gt;Hello World!&lt;/h1&gt;
&lt;p&gt;My name is Joe!&lt;/p&gt;
&lt;p&gt;There are many other things that you can do with Express, like grabbing parameters from the URL and passing them to your templates. We will see that in action in our demo site below.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;This is a basic dynamic site made with ExpressJS.&lt;/p&gt;
&lt;p&gt;It has an &lt;code&gt;/index&lt;/code&gt;, &lt;code&gt;/contact&lt;/code&gt; and &lt;code&gt;/about&lt;/code&gt; pages, each of them rendered by a basic Express route, and three car-specific pages rendered with Express dynamic routes using parameters taken from the URL.&lt;/p&gt;
&lt;p&gt;The aim is not to make a pretty site but just show the basic functionality that Express gives you to build a back-end dynamic site.&lt;/p&gt;
&lt;p&gt;The site&amp;rsquo;s home page will present you with a choice of links for three car brands. When you click on those links you are taken to a special page of the individual car brand that you selected and will see a bulleted list with three popular models from that brand.&lt;/p&gt;
&lt;p&gt;Even though the pages look very simple, this is not a static site. The pages are generated &lt;strong&gt;on the fly&lt;/strong&gt; by Express the moment you click on a link.&lt;/p&gt;
&lt;p&gt;If you want to clone this example go here: &lt;/p&gt;&lt;a href=&#34;https://github.com/mariobox/express-demo&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/express-demo&#34;&gt;https://github.com/mariobox/express-demo&lt;/a&gt;.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to play around with the site, you can use the embedded page below:&lt;/p&gt;
&lt;iframe src=&#34;https://mjq48.sse.codesandbox.io/&#34; title=&#34;Express Demo&#34; width=&#34;100%&#34; height=&#34;850px&#34; frameborder=&#34;1px&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Demo hosted in &lt;a href=&#34;https://codesandbox.com&#34;&gt;Codesandbox&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Implement a Dark Theme Switch for your Site</title>
      <link>https://mariosanchez.org/code/dark/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/dark/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/dark&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://mariobox.github.io/dark&#34;&gt;Live Demo&lt;/a&gt; &lt;hr class=&#34;art&#34;&gt;&lt;/p&gt;
&lt;p&gt;We will implement a dark theme selector for our site that visitors can activate by clicking on an icon. We will discuss what we have to do to the HTML, CSS and JavaScript files that make up our site to make that happen.&lt;/p&gt;
&lt;h5 id=&#34;the-html&#34;&gt;The HTML&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!--DOCTYPE--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;script.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://kit.fontawesome.com/3fe16e504a.js&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;na&#34;&gt;crossorigin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;style.css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Dark Theme&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;contact.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; |
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;about.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;toggle-switch&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Toggle Dark Theme&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fas fa-moon&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;toggle-switch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;span&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;My Dark Mode Theme&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;This is a sample site to demo how to switch to dark mode.&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For this example, we will create three simple HTML pages: &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;about.html&lt;/code&gt; and &lt;code&gt;contact.html&lt;/code&gt;. The code above is the &lt;code&gt;index.html&lt;/code&gt; page. At the top of each page, we will include a simple navigation menu next to which we will place a moon-shaped icon that users can click to turn on dark mode. Once in dark mode, the moon icon will switch to a sun icon, indicating that by clicking it the visitor can go back to the default light mode. Both the moon and the sun icons can be found in &lt;a href=&#34;https://fontawesome.com&#34;&gt;Fontawesome&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&#34;the-css&#34;&gt;The CSS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;--bck-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#FFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;--ft-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;--link-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;dark&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;--bck-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;--ft-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#FFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;--link-color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#DDD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ft&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;max-width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;auto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;active&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will define some variables for the colors we want to use in our dark and light themes. To keep it simple, we will just focus on the background, the font and the link colors. We will define our variables in the &lt;code&gt;html&lt;/code&gt; element and we&amp;rsquo;ll then reference them in the &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; elements. We will also create a &lt;code&gt;dark&lt;/code&gt; class for the &lt;code&gt;html&lt;/code&gt; element that we will activate via JavaScript once a visitor clicks on the moon icon.&lt;/p&gt;
&lt;h5 id=&#34;the-javascript&#34;&gt;The JavaScript&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DARK_MODE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dark&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LIGHT_MODE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;light&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;THEME&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mode&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s1&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;applyTheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;toggleSwitch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggle-switch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;toggleSwitch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onclick&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currentMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;localStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;THEME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;localStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;THEME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;currentMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DARK_MODE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;LIGHT_MODE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DARK_MODE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;applyTheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;applyTheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;documentElement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currentMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;localStorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;THEME&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currentMode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DARK_MODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DARK_MODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggle-switch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;i class=&amp;#34;fas fa-sun&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;classList&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DARK_MODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;toggle-switch&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;innerHTML&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;i class=&amp;#34;fas fa-moon&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s where the real magic happens. Since ours is a static site, we can&amp;rsquo;t rely on the server to store our mode preferences. We need to do it in the visitor&amp;rsquo;s browser, and for that we will make use of the &lt;code&gt;localStorage&lt;/code&gt; DOM property.&lt;/p&gt;
&lt;p&gt;Since the default mode is light, you&amp;rsquo;ll get the site in light mode on your first visit. As soon as the page loads, an event listener on the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event triggers a callback function that checks the browser&amp;rsquo;s &lt;code&gt;localStorage&lt;/code&gt; property for any record of the site&amp;rsquo;s mode. In our first visit there will be nothing stored there so the page will load in light mode.&lt;/p&gt;
&lt;p&gt;Upon clicking in the moon icon, the value of the &lt;code&gt;THEME&lt;/code&gt; const will change to &lt;code&gt;dark&lt;/code&gt; and the key value pair will be stored in &lt;code&gt;localStorage&lt;/code&gt; via the &lt;code&gt;localStorage.setItem(THEME, ...)&lt;/code&gt; method. At the same time, the class of our &lt;code&gt;html&lt;/code&gt; element will be set to &lt;code&gt;dark&lt;/code&gt; and the &lt;code&gt;innerHTML&lt;/code&gt; of the &lt;code&gt;span&lt;/code&gt; containing the moon icon html code will change to display a sun icon instead. Clicking on the sun icon will take the visitor back to light mode by following the same process. The changes between light and dark mode are implemented via the  &lt;code&gt;applyTheme()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Since the values stored in &lt;code&gt;localStorage&lt;/code&gt; are presistent, as long as the visitor uses the same browser it will remember the chosen mode next time the site is visited. You can test this by navigating to the different pages of the site, or even closing and opening your browser. Here is a &lt;a href=&#34;https://mariobox.github.io/dark&#34;&gt;demo&lt;/a&gt; where you can see this dark mode implementation in action.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Foreign Exchange Mobile Web App</title>
      <link>https://mariosanchez.org/code/fx/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/fx/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/fx-watcher&#34;&gt;Source Files&lt;/a&gt;  &lt;a href=&#34;https://mariobox.github.io/fx-watcher&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: The API I was using for this project is not in business any more, so the demo will not work. I am looking for a new API to adapt this project and make it work again.&lt;/p&gt;
&lt;hr class=&#34;art&#34; /&gt;
&lt;p&gt;We will create a mobile web app that will display the current exchange of a basket of currencies versus the US dollar. Besides the current rate we also want to display the &lt;strong&gt;YTD % devaluation&lt;/strong&gt; (or revaluation) for each of the currencies.&lt;/p&gt;
&lt;p&gt;I decided to implement this project because I work in international marketing, and devaluation is always an important variable to follow when analyzing business results. I wanted a simple, fast way to browse through the most important currencies for my business, and I wanted it to look good on my phone.&lt;/p&gt;
&lt;p&gt;This is how the app looks on my phone:&lt;/p&gt;
&lt;img src=&#34;https://mariosanchez.org/img/fx.PNG&#34; class=&#34;gallery medium&#34; /&gt;
&lt;p&gt;The &lt;strong&gt;HTML&lt;/strong&gt; is fairly straightforward. Since we wanted a nice styling that worked well in mobile we decided to use of &lt;a href=&#34;https://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;, by including it in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of our home page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another important piece of our home page is a &lt;code&gt;div&lt;/code&gt; with the ID of &lt;code&gt;root&lt;/code&gt;, where we will place the content generated by our &lt;code&gt;app&lt;/code&gt; (i.e. the currency table).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The JavaScript is a little bit more challenging. We used the &lt;code&gt;fetch()&lt;/code&gt; method to get info from an external &lt;a href=&#34;https://worldtradingdata.com&#34;&gt;API&lt;/a&gt; that provides the exchange rate information. We need two different API calls: one for today&amp;rsquo;s exchange rate, and another one for the rate on December 31 of the previous year. We need &lt;em&gt;both&lt;/em&gt; rates in order to calculate the &lt;abbr title=&#34;Year to Date&#34;&gt;YTD&lt;/abbr&gt; devaluation percentage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sb&#34;&gt;`https://api.worldtradingdata.com/api/v1/forex?base=USD&amp;amp;api_token=onH6cZpUDVXChT9cbQ6jHuCkgoWPjCmBNRz0Sy5hs4icLbqds5ta1VF0pDpl`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;sb&#34;&gt;`https://api.worldtradingdata.com/api/v1/forex_single_day?base=USD&amp;amp;date=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;formattedLastYear&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;amp;api_token=onH6cZpUDVXChT9cbQ6jHuCkgoWPjCmBNRz0Sy5hs4icLbqds5ta1VF0pDpl`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetchExchange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resly&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ratesly&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// some other code follows...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice we&amp;rsquo;re using &lt;code&gt;async&lt;/code&gt; to indicate an asynchronous function, and &lt;code&gt;await&lt;/code&gt; to tell the program to wait until it receives &lt;em&gt;all&lt;/em&gt; the information from the API before carrying on with the program.&lt;/p&gt;
&lt;p&gt;We also created two arrays, one containing the &lt;strong&gt;currency abbreviations&lt;/strong&gt; we want and another one containing &lt;strong&gt;country flags&lt;/strong&gt; that we use in our HTML to make it look nice. Note that the currency symbols have to match exactly the way the API refers to them, or no information will be sent back from their server. We also created two empty array to place the exchange rate values at the current date, and at the last day of the previous year:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currencies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ARS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;AUD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;BRL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CAD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CLP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CNY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;COP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;EUR&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GBP&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;INR&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;JPY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MXN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PEN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RUB&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;img/arg.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/aus.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/bra.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/can.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/chi.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/chn.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/col.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/eur.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/gbr.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/ind.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/jap.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/mex.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/per.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;img/rus.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exchanges&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exchangesly&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we receive the information from the API we have to &lt;strong&gt;parse it to a float&lt;/strong&gt;-since the info coming back from an API is always a string. Then, we use the &lt;code&gt;push()&lt;/code&gt; method to add the currency values to their respective arrays:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Update our arrays with exchange rate data return from fetch calls
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;exchanges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;currencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;exchangesly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;parseFloat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ratesly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;currencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have that information, a &lt;code&gt;for&lt;/code&gt; loop iterates over our &lt;strong&gt;flags&lt;/strong&gt;, &lt;strong&gt;currencies&lt;/strong&gt; and &lt;strong&gt;exchange&lt;/strong&gt; rate arrays and builds the HTML container that we will then pass to the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the ID of &lt;code&gt;root&lt;/code&gt; in our &lt;code&gt;index.html&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 0&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; i &amp;lt; l&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; i++&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    exchanges&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; - exchangesly&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &amp;lt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; ? &lt;span class=&#34;nv&#34;&gt;bkchangely&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#00CC00&amp;#34;&lt;/span&gt;: &lt;span class=&#34;nv&#34;&gt;bkchangely&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#FF0000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&amp;lt;tr&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &amp;lt;th &lt;span class=&#34;nv&#34;&gt;scope&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;row&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;img &lt;span class=&#34;nv&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[i]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;25px&amp;#34;&lt;/span&gt;&amp;lt;/th&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;currencies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[i]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&amp;lt;/strong&amp;gt;&amp;lt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &amp;lt;td&amp;gt;&amp;lt;strong&amp;gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;exchanges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[i].toFixed(2)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&amp;lt;/strong&amp;gt;&amp;lt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &amp;lt;td&amp;gt;&amp;lt;p &lt;span class=&#34;nv&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;change&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;background-color:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;bkchangely&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;strong&amp;gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(((exchanges[i] - exchangesly[i])/exchanges[i])*100*(-1)).toFixed(2)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;%&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/td&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &amp;lt;/tr&amp;gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// Build our table
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&amp;lt;table &lt;span class=&#34;nv&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;table table-dark&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;tbody&amp;gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// Display our table
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;document.getElementById&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.innerHTML &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we call our &lt;code&gt;fetchExchange()&lt;/code&gt; function to set the program in motion and deliver our table to the browser.&lt;/p&gt;
&lt;p&gt;All this will make more sense when you review the full &lt;a href=&#34;https://github.com/mariobox/fx-watcher&#34;&gt;source files&lt;/a&gt; available in Github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Airlines</title>
      <link>https://mariosanchez.org/code/airlines/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/airlines/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/airlines&#34;&gt;Source Files&lt;/a&gt;&lt;/p&gt;  
&lt;hr class=&#34;art&#34; /&gt;
&lt;p&gt;With this simple app we can type the name (or part of the name) of an airline in a form, and upon &lt;em&gt;Submit&lt;/em&gt; we get a list of airlines that match our input followed by its IATA symbol. For example, you can type “american” in the search box:&lt;/p&gt;
&lt;img src=&#34;https://mariobox.github.io/airlines/iata-search.jpg&#34;&gt;
&lt;p&gt;If you then click &lt;em&gt;Submit&lt;/em&gt;; the result will be a list of all the airlines that have “american” in their name, followed by their IATA symbol in parentheses:&lt;/p&gt;
&lt;img src=&#34;https://mariobox.github.io/airlines/iata-results.jpg&#34;&gt;
&lt;p&gt;If you&amp;rsquo;re more specific and type only “american airlines”, you&amp;rsquo;ll get just American Arilines and its symbol: AA.&lt;/p&gt;
&lt;p&gt;The program uses Flask, a light-weight web framework made in Python, and the templating engine Jinja. The airline information is in a JSON file.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first take a look at the templates. We will create a generic &lt;code&gt;layouts.html&lt;/code&gt; template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;initial-scale=1, width=device-width&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Airline Symbol Lookup Tool&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        {% block body %}{% endblock %}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code in curly brackets is a place holder, where the specific code of any other template that call on the &lt;code&gt;layouts.html&lt;/code&gt; template will be placed.&lt;/p&gt;
&lt;p&gt;In this example we only have one page, called &lt;code&gt;index.html&lt;/code&gt;. This is how its template looks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{% extends &amp;#34;layout.html&amp;#34; %}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{% block body %}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Find the IATA symbol of an airline&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Input an airline name:&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/iata&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;airline&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;airline&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Results&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {% for airline in results %}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ airline }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {% endfor %}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ul&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{% endblock %}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is what happens in the &lt;code&gt;index.html&lt;/code&gt; page:&lt;/p&gt;
&lt;p&gt;First, it &amp;ldquo;calls&amp;rdquo; the &lt;code&gt;layout.html&lt;/code&gt; template and inserts the HTML code where the place holders in the &lt;code&gt;layouts.html&lt;/code&gt; are. Then it displays a form where the visitor can type the name (or part of the name) of an airline. Upon submit, a list of airlines that match the input will be displayed under the headline &lt;em&gt;Results&lt;/em&gt;, followed by their symbol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s see how this all works.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First we need to create an &lt;code&gt;application.py&lt;/code&gt; file where the business logic of our app will live. We start by importing the modules we need, and defining a variable called &lt;code&gt;app&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;redirect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;render_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Configure app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, the program takes a JSON file with all airline/symbol combinations and transforms it into a python list of objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;airlines.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# turn json array of objects into an python list &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we iterate over all the airlines on the list, convert each airline&amp;rsquo;s information into a tupple, and append those tupples to a new list. Each tupple will be in the form of (&lt;em&gt;Airline Symbol&lt;/em&gt;, &lt;em&gt;Airline Name&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# create an empty list to store airline (symbol, name) tuples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;symbol_airline&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# create airline (symbol, name) tuples and append to symbol_airline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;airline&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;symbol_airline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;airline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we&amp;rsquo;re ready to process user input and display the results via routes.&lt;/p&gt;
&lt;p&gt;Our first route is &lt;code&gt;/&lt;/code&gt; that takes us to the index page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@app.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;render_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty straight forward: it just takes us to the home page where our form is located.&lt;/p&gt;
&lt;p&gt;Then, once the visitor fills and submits the form, they are taken to the &lt;code&gt;/iata&lt;/code&gt; route, where our app will process the user input, store the results in a variable called &lt;code&gt;results&lt;/code&gt;, and finally pass that variable to the Jinja &lt;code&gt;index.html&lt;/code&gt; template so that it can plug those results in the HTML code of our results page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@app.route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/iata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;iata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;user_input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;form&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;airline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;user_input_lower&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;airline&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symbol_airline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;airline_lower&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;airline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_input_lower&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;airline_lower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;airline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; (&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;airline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;render_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run this code on your computer you need to access the FLASK_APP enviroment variable by typing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export FLASK_APP=application.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;from the command line, followed by:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flask run&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/airlines&#34;&gt;Click here&lt;/a&gt; for the source code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript Photo Gallery</title>
      <link>https://mariosanchez.org/code/photos/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/photos/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;hr class=&#34;art&#34; /&gt;
&lt;p&gt;I wanted to post a few pictures from my trips and other activities here in the site. Looking around the web for ideas I settled on a simple square format for the pictures, with a subtle frame and a gray transparent rectangle for the description placed at the bottom of the photo:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://mariosanchez.org/img/UMBike.jpg&#34; class=&#34;gallery medium&#34; /&gt;&lt;figcaption&gt;University of Miami&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;These are the style declarations for the photos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;gallery&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;solid&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#ccc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;margin-bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;margin-right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;picbox&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;inline-block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;figure&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;relative&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;figcaption&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.85&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;#fff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rgba&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;.50&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;absolute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;margin-bottom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;margin-left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;em&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;box-sizing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;border-box&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since I&amp;rsquo;m using a mobile first approach, the style declarations above apply to small screens. For screen sizes 769px and up I created a media query slightly modifying the size of the pictures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;media&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;min-width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;769px&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;gallery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;medium&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I placed the pictures in my &lt;code&gt;img&lt;/code&gt; folder and then created a &lt;a href=&#34;https://mariosanchez.org/pix.json&#34;&gt;JSON file&lt;/a&gt; with the url and description of each picture. Every time I want to add a picture to the gallery, I add a new member at the top of the object.&lt;/p&gt;
&lt;p&gt;Finally, I created the following &lt;a href=&#34;https://mariosanchez.org/js/pix.js&#34;&gt;JavaScript script&lt;/a&gt; that renders the images in the gallery. The script uses the &lt;code&gt;fetch()&lt;/code&gt; method to pull the information from the JSON file and then parses it to convert it into a JavaScript object (in this case an array). It then maps over the array and builds the HTML elements that hold the gallery and the pictures. Once the map function is done, the HTML is placed in the proper place in the photos HTML template via the &lt;code&gt;document.getElementById()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;By using a small script we avoid having to hard code the HTML page every time we want to add a picture.&lt;/p&gt;
&lt;p&gt;To see the gallery in action click &lt;a href=&#34;https://mariosanchez.org/photos&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stock Info Dashboards with ReactJS</title>
      <link>https://mariosanchez.org/code/stocksreact/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/stocksreact/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-react&#34;&gt;&lt;/i&gt; React&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/stocks-react&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;http://mariobox.github.io/stocks-react&#34;&gt;Live Demo&lt;/a&gt;&lt;hr class=&#34;art&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As of May 9, 2020, the API I was using to fecth the stock info has gone out of business so the values you will get in the &lt;a href=&#34;http://mariobox.github.io/stocks-react&#34;&gt;Demo&lt;/a&gt; are all null. The functionality of the app, though, remains correct. I will update as soon as I find another free API.&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;To build a stock info app using React.&lt;/p&gt;
&lt;h2 id=&#34;what-we-wanted-to-accomplish&#34;&gt;What we wanted to accomplish&lt;/h2&gt;
&lt;p&gt;We wanted a simple form that let us input stock symbols. Upon submission, we wanted a page listing the names of those companies, hyperlinked to a specific company page where we could look at some financials.&lt;/p&gt;
&lt;p&gt;Fig. 1: Input a few symbols and send the form:&lt;/p&gt;
&lt;img src=&#34;https://mariosanchez.org/img/rs3.png&#34; /&gt;
&lt;p&gt;Fig 2: List of companies whose symbols we submitted&lt;/p&gt;
&lt;img src=&#34;https://mariosanchez.org/img/rs2.png&#34; /&gt;
&lt;p&gt;Fig 3: Financials for each company&lt;/p&gt;
&lt;img src=&#34;https://mariosanchez.org/img/rs1.png&#34; width=546px; /&gt;
&lt;h2 id=&#34;how-we-went-about-it&#34;&gt;How we went about it&lt;/h2&gt;
&lt;p&gt;We used React to render our HTML pages. We used a third party API for the stock info. We used the &lt;code&gt;fetch()&lt;/code&gt; method to get the info from the API. We then used React routes and hooks to render the pages dynamically, using the parameters in the search query.&lt;/p&gt;
&lt;h2 id=&#34;what-did-we-learn&#34;&gt;What did we learn&lt;/h2&gt;
&lt;p&gt;We used &lt;code&gt;URLSearchParams(window.location.search)&lt;/code&gt; to grab the query string parameter values.&lt;/p&gt;
&lt;p&gt;We passed those values to our API endpoint using &lt;code&gt;fetch()&lt;/code&gt;and then parsed the response with the &lt;code&gt;json()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Once we received the info, we used React&amp;rsquo;s new &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; functions to update our components and state. To make sure that the React components didn&amp;rsquo;t render before the info from the API arrived, we used the &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; flags.&lt;/p&gt;
&lt;p&gt;Both the list of company names and the individual stock pages are generated dynamically, using the parameters in the query string.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Progress Circle with JS and CSS</title>
      <link>https://mariosanchez.org/code/progresscircle/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/progresscircle/</guid>
      <description>&lt;img src=&#34;https://mariosanchez.org/img/progresscircle.png&#34; /&gt;
&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript | &lt;i class=&#34;fab fa-css3&#34;&gt;&lt;/i&gt; CSS&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mariobox/progress-circle&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://mariobox.github.io/progress-circle&#34;&gt;Live Demo&lt;/a&gt;&lt;hr class=&#34;art&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I started with &lt;a href=&#34;https://kimmobrunfeldt.github.io/progressbar.js/&#34;&gt;progressbar.js&lt;/a&gt; by Kimmo Brunfeldt, which does most of the heavy lifting. You can add it your project by including a link near your closing body tag to the &lt;a href=&#34;https://cdn.rawgit.com/kimmobrunfeldt/progressbar.js/0.5.6/dist/progressbar.js&#34;&gt;CDN repository&lt;/a&gt; where progressbar.js resides.&lt;/p&gt;
&lt;p&gt;I used Progressbar&amp;rsquo;s circle as the base for my project (you can use other geometrical shapes), which is intended to create an animated score dashboard to display at the end of a quiz. I then customized the shape with the following options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I inserted the actual score in number format, centered in the middle of the circle. For this, I had to play with HTML id&amp;rsquo;s and classes, and CSS absolute and relative positioning. Since the score is passed to a variable, I passed the variable to the &lt;code&gt;animate()&lt;/code&gt; function that draws the progress bar around the circle. For example, if the score is 8, the progress bar will only display around 80% of the circle (like in the image at the beginning of the article).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I gave the progress bar different colors, depending on the score, which runs from 0 to 10 (but you can use any range you want just by tweaking the code). If the score is between 0 and 3, the progress bar is red. Between 4 and 7 it is yellow, and between 8 and 10 it is green.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can try it out here:&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;iframe src=&#34;https://mariobox.github.io/progress-circle&#34; style=&#34;height: 400px; border=none;&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>eCommerce App with Flask and SQLite</title>
      <link>https://mariosanchez.org/code/flaskecomm/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/flaskecomm/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-python&#34;&gt;&lt;/i&gt; Python, &lt;i class=&#34;fas fa-database&#34;&gt;&lt;/i&gt; SQLite and &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/flask-ecomm&#34;&gt;Source Files&lt;/a&gt;&lt;/p&gt; &lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;This app was my &lt;a href=&#34;https://www.edx.org/course/cs50s-introduction-to-computer-science&#34;&gt;CS50x&lt;/a&gt; final project.&lt;/p&gt;
&lt;p&gt;The app loads a gallery of soccer shirts that includes: image, description, price, and a small form to add item to cart. The shirt info is stored in a SQLite database and is displayed using Bootstrap&amp;rsquo;s card class.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/186f34c7243200b24693260946874509/tumblr_pkaxbfmFxT1qz7ur9o1_1280.png&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em&#34; /&gt;
&lt;p&gt;The app includes a series of filters implemented using SQLite queries so you can see only shirts that match a certain filter: shirts by region, clubs vs. national teams, shirts on sale, etc.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/967710ad3afc4d4d42666525e7fa82b4/tumblr_pkaxbfmFxT1qz7ur9o3_1280.png&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em&#34; /&gt;
&lt;p&gt;If a user is not logged in and tries to add something to the shopping cart she will see a warning message (implemented with jQuery) asking her to log in.&lt;/p&gt;
&lt;p&gt;Once registered and logged in, the user can add shirts to the shopping cart. A link to the shopping cart can be found at the top right of the screen, showing the amount of items in the cart as well as the sub-total in dollars. Clicking the shopping cart link opens a Bootstrap modal window showing the shopping cart in more detail.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/9fa9dd37719e34daf368927164e07827/tumblr_pkaxbfmFxT1qz7ur9o4_1280.png&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em&#34; /&gt;
&lt;p&gt;If you want to make changes, like add one more shirt or remove a shirt, you can click on the Make Changes button and you will be taken to the full version of the shopping cart.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/9789a8543b36eccdf47235a676835c03/tumblr_pkaxbfmFxT1qz7ur9o5_r1_1280.png&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em&#34; /&gt;
&lt;p&gt;Once you check out, the idea is to be sent to a payment processor. However, that part is not implemented yet.&lt;/p&gt;
&lt;p&gt;If you want to see your purchase history, just click on the You Bought link and you will see all the shirts you have ever bought. You will also find a Buy Again link that will direct you to the product page in case you want to buy it again.&lt;/p&gt;
&lt;img src=&#34;https://66.media.tumblr.com/9fd4c95ccd60cb229d97366b66098986/tumblr_pkaxbfmFxT1qz7ur9o2_1280.png&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em &#34; /&gt;
&lt;p&gt;Once you&amp;rsquo;re finished, you can just log out.&lt;/p&gt;
&lt;p&gt;If you want to see the app in action, fork the repository to your own computer and perform the following commands from the command line in your project folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;export FLASK_APP=application.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;flask run
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This assumes you have Python, Flask and SQLite installed in your computer, as well as a link to Bootstrap and the following modules necessary to run &lt;code&gt;application.py&lt;/code&gt; installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cs50&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SQL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask_session&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Session&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;flask&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Flask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;render_template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;redirect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jsonify&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;datetime&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datetime&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Micro Blog Front End with React</title>
      <link>https://mariosanchez.org/code/micro-blog/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/micro-blog/</guid>
      <description>&lt;img src=&#34;https://mariosanchez.org/img/micro-blog.png&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em&#34;&gt;
&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-react&#34;&gt;&lt;/i&gt; ReactJS&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/react-micro-blog&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://mariobox.github.io/react-micro-blog&#34;&gt;Live Demo&lt;/a&gt; &lt;/p&gt;&lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;This front end project is inspired in a minimal version of Twitter. We use React components and JavaScript ES6 classes, and put into practice the concept of state. It also uses JSX syntax.&lt;/p&gt;
&lt;p&gt;We start by running &lt;a href=&#34;https://create-react-app.dev/&#34;&gt;Create React App&lt;/a&gt;, which provides the scaffolding for our site and performs all the lifting so that we can focus on the code.&lt;/p&gt;
&lt;p&gt;Our app has six components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;App.js&lt;/code&gt;: our main component&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Greeting.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Login.js&lt;/code&gt; (if the user is not logged in)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Profile.js&lt;/code&gt; (if the user is logged in).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AddPost.js&lt;/code&gt; to manage the post input field, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Post.js&lt;/code&gt; which lists the posts in reverse chronological order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State is concentrated in the main &lt;code&gt;App.js&lt;/code&gt;, and then passed down to the other components via props.&lt;/p&gt;
&lt;p&gt;There are three state properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;posts&lt;/code&gt;: an object with a list of all posts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;: the information of the user who is logged-in at any given moment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isLoggedIn&lt;/code&gt;: a boolean indicating if somebody is logged in or not&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;isLoggedIn&lt;/code&gt; boolean tells the &lt;code&gt;Greeting.js&lt;/code&gt; component what to display via conditional rendering: if false, display a log-in form &lt;code&gt;Login.js&lt;/code&gt;. If true, display the current user&amp;rsquo;s profile &lt;code&gt;Profile.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once logged in, users can write posts and they will immediately appear as the first post of the list.&lt;/p&gt;
&lt;p&gt;Check the app in action &lt;a href=&#34;https://mariobox.github.io/react-micro-blog&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Real Estate Website with Bootstrap</title>
      <link>https://mariosanchez.org/code/rei/</link>
      <pubDate>Fri, 02 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/rei/</guid>
      <description>&lt;p&gt;
&lt;img src=&#34;https://mariosanchez.org/img/rei.jpg&#34; style=&#34;width: 100%; margin-bottom: 3em; margin-top: 2em&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-html5&#34;&gt;&lt;/i&gt; HTML | &lt;i class=&#34;fab fa-css3&#34;&gt;&lt;/i&gt; CSS | &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/rlo555/rlo555.github.io&#34;&gt;Source Files&lt;/a&gt; | &lt;a href=&#34;https://habitatinvestors.com&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt;&lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;The objective was to design a clean, efficient, and fully responsive website for a real estate investments business. It needed to clearly describe what the company did, and include easy to follow call-to-actions throughout the site.&lt;/p&gt;
&lt;p&gt;It was made using the &lt;a href=&#34;https://startbootstrap.com/template-overviews/agency/&#34;&gt;Agency&lt;/a&gt; template for Bootstrap, a fully functional form by &lt;a href=&#34;http://formspree.io&#34;&gt;Formspree&lt;/a&gt;, and several jQuery plugins for smooth transitions and a carrousel of testimonials.&lt;/p&gt;
&lt;p&gt;Feel free to check the &lt;a href=&#34;https://habitatinvestors.com&#34;&gt;live demo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Basic Calculator with HTML, CSS and JS</title>
      <link>https://mariosanchez.org/code/calc/</link>
      <pubDate>Sat, 18 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/calc/</guid>
      <description>&lt;img src=&#34;https://mariosanchez.org/img/calc.png&#34; class=&#34;profile&#34;&gt;
&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-html5&#34;&gt;&lt;/i&gt; HTML | &lt;i class=&#34;fab fa-css3&#34;&gt;&lt;/i&gt; CSS &lt;i class=&#34;fab fa-js&#34;&gt;&lt;/i&gt; JavaScript&lt;/p&gt;
&lt;p class=&#34;bullet list&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/the-odin-project/tree/master/calculator&#34;&gt;Source Files&lt;/a&gt;  &lt;a href=&#34;https://mariobox.github.io/the-odin-project/calculator//&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &lt;hr class=&#34;art&#34;&gt;
&lt;p&gt;Project involved creating the calculator interface with HTML and CSS and then adding fuctionality through event handlers and callback functions. It works fine, with some improvements yet to be made, like limiting the display to a certain number of digits so that they fit in the calculator window when the number is too large.&lt;/p&gt;
&lt;p&gt;You can try it out here:&lt;/p&gt;
&lt;div style=&#34;text-align: center&#34;&gt;
&lt;iframe src=&#34;https://mariobox.github.io/the-odin-project/calculator/&#34; style=&#34;height: 400px; border=none;&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Building a Single Page Application with AngularJS</title>
      <link>https://mariosanchez.org/code/angular/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://mariosanchez.org/code/angular/</guid>
      <description>&lt;img src=&#34;https://mariosanchez.org/img/angularjs.png&#34; class=&#34;gallery medium&#34; /&gt;
&lt;p&gt;&lt;strong&gt;Made with&lt;/strong&gt;: &lt;i class=&#34;fab fa-angular&#34;&gt;&lt;/i&gt; Angular&lt;/p&gt;
&lt;p class=&#34;bullet&#34;&gt;&lt;a href=&#34;https://github.com/mariobox/angulartestsite&#34;&gt;Source Files&lt;/a&gt;  &lt;a href=&#34;https://mariobox.github.io/angulartestsite&#34;&gt;Live Demo&lt;/a&gt; &lt;hr class=&#34;art&#34;&gt;&lt;/p&gt;
&lt;p&gt;A few weeks ago I came across the concept of &lt;abbr title=&#34;Single Page Application&#34;&gt;SPA&lt;/abbr&gt;, or &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-page_application&#34;&gt;Single Page Application&lt;/a&gt;, and learned that they can be created with &lt;a href=&#34;https://angularjs.org/&#34;&gt;Angular.js&lt;/a&gt;, a JavaScript library supported by Google.&lt;/p&gt;
&lt;p&gt;Most definitions of SPA you can find online are very technical and full of jargon, so perhaps the best way a newbie web developer like me can understand it is with an example:&lt;/p&gt;
&lt;p&gt;Suppose you have an &lt;code&gt;index.html&lt;/code&gt; web page with three different sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The header (where the navigation menu is)&lt;/li&gt;
&lt;li&gt;The content area, and&lt;/li&gt;
&lt;li&gt;The footer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The header and the footer remain the same all over the website, so the only thing that really changes when you go from the &lt;code&gt;index.html&lt;/code&gt; page to, say, the &lt;code&gt;about.html&lt;/code&gt; page is the actual page content.&lt;/p&gt;
&lt;p&gt;What a SPA does is to allow the header and the footer to stay right where they are, while it calls only the actual content of the &lt;code&gt;about.html&lt;/code&gt; page and sticks it right between the header and the footer. No new page is loaded (that&amp;rsquo;s where the &amp;ldquo;Single Page&amp;rdquo; part of Single Page Application comes from).&lt;/p&gt;
&lt;p&gt;The switch between the content of your &lt;code&gt;index.html&lt;/code&gt; and your &lt;code&gt;about.html&lt;/code&gt; page is done on the fly by the browser of the person viewing your site, by following the &lt;strong&gt;Angular.js&lt;/strong&gt; directives embedded in the page code.&lt;/p&gt;
&lt;p&gt;I wanted to test building a SPA by creating a barebones, basic brochure site, using &lt;strong&gt;Angular.js&lt;/strong&gt; to generate four page views: Home, About, Contact and Resume.&lt;/p&gt;
&lt;p&gt;I found an &lt;a href=&#34;https://www.airpair.com/angularjs/building-angularjs-app-tutorial&#34;&gt;excellent tutorial&lt;/a&gt; online. After reading it carefully several times I started by creating the index template, which contains the Angular directives to make the site work, and which acts as a template for the whole site.&lt;/p&gt;
&lt;p&gt;I then created bare-bones html files for the other three pages of the site: About, Contact and Resume (nothing fancy, just a couple of &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tags and a paragraph).&lt;/p&gt;
&lt;p&gt;Finally, I tweaked the &lt;strong&gt;main.js&lt;/strong&gt; file to refer to my four pages: &lt;code&gt;/home&lt;/code&gt;, &lt;code&gt;/contact&lt;/code&gt;, &lt;code&gt;/about&lt;/code&gt;, and &lt;code&gt;/resume&lt;/code&gt;, instead of all the different pages listed in the tutorial (which uses a bloated website template that I decided not to follow, for simplicity&amp;rsquo;s sake. I also didn&amp;rsquo;t use the Bootstrap style sheets suggested by the author, opting instead for a much simpler style sheet based on &lt;a href=&#34;http://getskeleton.com&#34;&gt;Skeleton&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;main.js&lt;/strong&gt; file is where the real magic happens: it contains the Routes, which are basically the instructions that &lt;strong&gt;Angular.js&lt;/strong&gt; gives the browser: &amp;ldquo;if user clicks on &lt;code&gt;/about&lt;/code&gt; do this; if user clicks on &lt;code&gt;/contact&lt;/code&gt; do that&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If you want to try it yourself I recommend that you read and follow the &lt;a href=&#34;https://www.airpair.com/angularjs/building-angularjs-app-tutorial&#34;&gt;tutorial&lt;/a&gt;. The author is obviously a very capable programmer and can explain things much better than I can.&lt;/p&gt;
&lt;p&gt;You can also clone the site I created. Here is the Github repo: &lt;a href=&#34;http://github.com/mariobox/angulartestsite/&#34;&gt;http://github.com/mariobox/angulartestsite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also created a &lt;a href=&#34;http://mariobox.github.io/angulartestsite&#34;&gt;Live Demo&lt;/a&gt; so you can try it out on your browser.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
